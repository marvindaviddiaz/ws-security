<?xml version="1.0" encoding="UTF-8"?>
<xwss:SecurityConfiguration xmlns:xwss="http://java.sun.com/xml/ns/xwss/config"
	dumpMessages="true">


	<!-- RequireUsernameToken: When using password digests, the SOAP message 
		also contains a UsernameToken element, which itself contains a Username element 
		and a Password element. The difference is that the password is not sent as 
		plain text, but as a digest. The recipient compares this digest to the digest 
		he calculated from the known password of the user, and if they are the same, 
		the user is authenticated. It can be compared to the Digest Authentication 
		provided by HTTP servers. Spring compara el password recibido, con el password 
		almacenado para el usuario pasandolo por SHA-1 con Base64 Encoder -->

	<xwss:RequireUsernameToken
		passwordDigestRequired="true" nonceRequired="true" />

	<xwss:RequireSignature requireTimestamp="false">
		<xwss:X509Token />
		<xwss:SignatureTarget type="qname" enforce="true" value="{http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd}UsernameToken" />
	</xwss:RequireSignature>

	<xwss:RequireEncryption>
		<xwss:EncryptionTarget type="qname" contentOnly="true" enforce="true" value="{http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd}UsernameToken"/>
	</xwss:RequireEncryption>


	<xwss:Encrypt >
		<xwss:X509Token certificateAlias="trustedclient1" />
		<xwss:EncryptionTarget type="qname" contentOnly="true" enforce="true" value="{http://schemas.xmlsoap.org/soap/envelope/}Body"/>
	</xwss:Encrypt>
	
	<xwss:Sign includeTimestamp="false">
		<xwss:SignatureTarget type="qname" enforce="true" value="{http://schemas.xmlsoap.org/soap/envelope/}Body" />
	</xwss:Sign>

</xwss:SecurityConfiguration>